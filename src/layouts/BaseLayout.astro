---
import type { ImageMetadata } from 'astro'

import { Footer, Header, ThemeProvider } from 'astro-pure/components/basic'
import type { SiteMeta } from 'astro-pure/types'
import BaseHead from '@/components/BaseHead.astro'
import config from '@/site-config'

// Import the global.css file here so that it is included on
// all pages through the use of the <BaseLayout /> component.
import '@/assets/styles/app.css'

import defaultBg from '@/assets/cat.png'

interface Props {
  meta: SiteMeta
  highlightColor?: string
  backgroundImage?: ImageMetadata
}

const {
  meta: { articleDate, description = config.description, ogImage, title },
  highlightColor,
  backgroundImage,
  ...props
} = Astro.props

const effectiveBackgroundImage = backgroundImage ?? (defaultBg as ImageMetadata)
---

<html lang={config.locale.lang}>
  <head>
    <BaseHead {articleDate} {description} {ogImage} {title} />
    <ThemeProvider />
    <link rel='preload' as='image' href={effectiveBackgroundImage.src} />
  </head>

  <body class='flex justify-center bg-background text-foreground' {...props}>
    {
      effectiveBackgroundImage ? (
        <div
          id='highlight-gradient'
          class='pointer-events-none fixed inset-0 z-0 opacity-40'
          style={`background-image:url(${effectiveBackgroundImage.src});background-size:cover;background-position:center;background-attachment:fixed;will-change:opacity,transform;transform:translateZ(0);backface-visibility:hidden;contain:paint;`}
        />
      ) : (
        highlightColor && (
          <div
            id='highlight-gradient'
            class='pointer-events-none fixed inset-0 z-0 opacity-25'
            style={`background-image:linear-gradient(${highlightColor},transparent);will-change:opacity,transform;transform:translateZ(0);backface-visibility:hidden;contain:paint;`}
          />
        )
      )
    }
    <div
      id='glass-overlay'
      class='pointer-events-none fixed inset-0 z-10'
      style='backdrop-filter: blur(88px) saturate(0.8); -webkit-backdrop-filter: blur(88px) saturate(0.8); will-change: backdrop-filter, opacity; transform: translateZ(0); backface-visibility: hidden; isolation: isolate; contain: paint; background-color: hsl(var(--background) / 0.16); background-image: linear-gradient(to bottom, rgba(255,255,255,0.06), rgba(255,255,255,0.08));'
    >
    </div>
    <div
      class='relative z-20 w-full max-w-[70rem] px-4 sm:px-7 lg:px-10 min-h-[100dvh] flex flex-col justify-between'
    >
      <Header />
      <div class='flex-1 w-full'>
        <slot />
      </div>
      <Footer />
    </div>

    {/* Set highlight color */}
    <style define:vars={{ highlightColor }}>
      :global(.highlight) {
        color: var(--highlightColor, hsl(var(--primary) / var(--un-text-opacity))) !important;
      }
      :global(.highlight-bg) {
        background-color: var(
          --highlightColor,
          hsl(var(--primary) / var(--un-text-opacity))
        ) !important;
      }
    </style>
  </body>
</html>
